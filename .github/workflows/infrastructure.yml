# This workflow installs Terraform CLI V1.0.0 and configures the Terraform CLI configuration file and install all resources under AWS
name: Infrastructure_Deployment

on:
  push:
    branches: [infra]
  pull_request:
    branches: [infra]

jobs:
  Terraform_pre-commit:
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository to the GitHub Actions runner
      - uses: actions/checkout@v3

      # Install Pre commit dependencies
      - name: Install TerrformDocs,  & tflint
        run: |
          sudo apt update
          sudo apt install snapd
          sudo snap install terraform-docs
          curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash
          curl -s https://raw.githubusercontent.com/aquasecurity/tfsec/master/scripts/install_linux.sh | bash

      #########################################################
      ## Run Terraform Pre-commit
      ## CHECK FMT
      ## CHECK VALIDATE
      ## CHECK DOCS
      ## CHECK TFLINTS
      ##########################################################
      - uses: actions/setup-python@v3
      - uses: pre-commit/action@v3.0.0

      # Send a slack notification for failed
      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_CHANNEL: core-api-alert
          SLACK_COLOR: ${{ job.status }}
          SLACK_ICON: https://github.com/rtCamp.png?size=48
          SLACK_MESSAGE: ${{ github.event.head_commit.message }}
          SLACK_TITLE: Commit Message
          SLACK_USERNAME: rtCamp
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK  }}
        if: failure()

  EKS_Deployment:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/infra' && github.event_name == 'push'
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    defaults:
      run:
        working-directory: terraform/eks_infrastructure
    needs: Terraform_pre-commit
    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: checkout repo
        uses: actions/checkout@v2

      # Install Terraform CLI with version 1.0.1 and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.1
          terraform_wrapper: false

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        working-directory: ./terraform/eks_infrastructure
        id: init
        run: |
          terraform init

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        working-directory: ./terraform/eks_infrastructure
        id: plan
        # if: github.event_name == 'pull_request'
        run: |
          terraform plan -no-color
        continue-on-error: true

      # FORCE UNLOCKING OF FILE
      # - name: Terraform Force Unlock file
      #   if: github.ref == 'refs/heads/infra' && github.event_name == 'push'
      #   run: terraform force-unlock 37344fdf-248c-32f8-42a0-310730a428f5

      # On push to infra, build or change infrastructure according to Terraform configuration files
      - name: Terraform Apply
        if: github.ref == 'refs/heads/infra' && github.event_name == 'push'
        run: terraform apply -var="db_password=${{ secrets.DB_PASSWORD }}" -auto-approve -lock=false

      # Destroy all created resources
      # - name: Terraform destroy infrastruture
      #   run: terraform destroy -var="db_password=${{ secrets.DB_PASSWORD }}" -auto-approve
      #   continue-on-error: true

      # Check the Output of some resuourse created ---
      - name: Call Terraform output
        run: |
          output=$(terraform output)
          echo $output

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      # Send a slack notification
      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_CHANNEL: core-api-alert
          SLACK_COLOR: ${{ job.status }}
          SLACK_ICON: https://github.com/rtCamp.png?size=48
          SLACK_MESSAGE: ${{ github.event.head_commit.message }}
          SLACK_TITLE: Commit Message
          SLACK_USERNAME: rtCamp
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK  }}
        if: always()
